1.  Sending Client Data to the Server
    Broadly speaking, your two options for sending client data to the server are the querystring and the 
    request body. Normally, if you’re using the querystring, you’re making a GET request, and if you’re using 
    the request body, you’re using a POST request (the HTTP protocol doesn’t prevent you from doing it the other 
    way around, but there’s no point to it: best to stick to standard practice here). 
   
    It is a common misperception that POST is secure and GET is not: in reality, both are secure if you use HTTPS, 
    and neither is secure if you don’t. 
            If you’re not using HTTPS, an intruder can look at the body data for a POST just as easily as the 
            querystring of a GET request. 
            However, if you’re using GET requests, your users will see all of their input (including hidden fields) 
            in the querystring, which is ugly and messy. Also, browsers often place limits on querystring length 
            (there is no such restriction for body length). 
    For these reasons, I generally recommend using POST for form submission.

2.  HTML Forms
    This book is focusing on the server side, but it’s important to understand some basics about constructing HTML 
    forms. Here’s a simple example:
            <form action="/process" method="POST">
                <input type="hidden" name="hush" val="hidden, but not secret!">
                <div>
                    <label for="fieldColor">Your favorite color: </label>
                    <input type="text" id="fieldColor" name="color">
                </div>
                <div>
                    <button type="submit">Submit</button>
                </div>
            </form>

    Notice the method is specified explicitly as POST in the <form> tag; if you don’t do this, it defaults to GET. 
    The action attribute specifies the URL that will receive the form when it’s posted. If you omit this field, 
    the form will be submitted to the same URL the form was loaded from. I recommend that you always provide a 
    valid action, even if you’re using AJAX (this is to prevent you from losing data; see Chapter 22 for more
    information).
    
    From the server’s perspective, the important attribute in the <input> fields are the name attributes: 
    that’s how the server identifies the field. It’s important to understand that the name attribute is distinct 
    from the id attribute, which should be used for styling and frontend functionality only 
    (it is not passed to the server). Note the hidden field: this will not render in the user’s browser. 
    However, you should not use it for secret or sensitive information: all the user has to do is examine 
    the page source, and the hidden field will be exposed.
    
    HTML does not restrict you from having multiple forms on the same page (this was an unfortunate restriction 
    of some early server frameworks; ASP, I’m looking at you).I recommend keeping your forms logically consistent: 
    a form should contain all the fields you would like submitted (optional/empty fields are okay), and none that 
    you don’t. If you have two different actions on a page, use two different forms. An example of this would be 
    to have a form for a site search and a separate form for signing up for an email newsletter. It is possible to 
    use one large form and figure out what action to take based on what button a person clicked, but it is a 
    headache, and often not friendly for people with disabilities (because of the way accessibility browsers 
    render forms).
    
    When the user submits the form, the /process URL will be invoked, and the field values will be transmitted 
    to the server in the request body.

3.  Encoding
    When the form is submitted (either by the browser or via AJAX), it must be encoded somehow. If you don’t 
    explicitly specify an encoding, it defaults to application/x-wwwform-urlencoded (this is just a lengthy media 
    type for “URL encoded”). This is a basic, easy-to-use encoding that’s supported by Express out of the box.

    If you need to upload files, things get more complicated. There’s no easy way to send files using URL encoding, 
    so you’re forced to use the multipart/form-data encoding type, which is and is not handled directly by Express 
    (actually, Express still supports this encoding, but it will be removed in the next version of Express, and its 
    use is not recommended: we will be discussing an alternative shortly).

4.  Differnent Approaches to Form Handling
    If you’re not using AJAX, your only option is to submit the form through the browser, which will reload the page. 
    However, how the page is reloaded is up to you. There are two things to consider when processing forms: 
    what path handles the form (the action), and what response is sent to the browser.
    
    If your form uses method="POST" (which is recommended), it is quite common to use the same path for displaying 
    the form and processing the form: these can be distinguished because the former is a GET request, and the latter 
    is a POST request. If you take this approach, you can omit the action attribute on the form.
    The other option is to use a separate path to process the form. For example, if your contact page uses the path 
    /contact, you might use the path /process-contact to process the form (by specifying action="/process-contact"). 
    
    If you use this approach, you have the option of submitting the form via GET (which I do not recommend; it 
    needlessly exposes your form fields on the URL). This approach might be preferred if you have multiple URLs 
    that use the same submission mechanism (for example, you might have an email sign-up box on multiple pages 
    on the site).
    
    Whatever path you use to process the form, you have to decide what response to send back to the browser. 
    Here are your options:

    a.  Direct HTML response
        After processing the form, you can send HTML directly back to the browser (a view, for example). 
        This approach will produce a warning if the user attempts to reload the page and can interfere 
        with bookmarking and the Back button, and for these reasons, it is not recommended.
    b.  302 redirect
        While this is a common approach, it is a misuse of the original meaning of the 302 (Found) response code. 
        HTTP 1.1 added the 303 (See Other) response code, which is preferable. Unless you have reason to target 
        browsers made before 1996, you should use 303 instead.
    c.  303 redirect
        The 303 (See Other) response code was added in HTTP 1.1 to address the misuse of the 302 redirect. 
        The HTTP specification specifically indicates that the browser should use a GET request when following a 
        303 redirect, regardless of the original method. This is the recommended method for responding to a form 
        submission request.

    Since the recommendation is that you respond to a form submission with a 303 redirect, the next question is 
    “Where does the redirection point to?” The answer to that is up to you. Here are the most common approaches:

    a.  Redirect to dedicated success/failure pages
        This method requires that you dedicate URLs for appropriate success or failure messages. For example, 
        if the user signs up for promotional emails, but there was a database error, you might want to redirect to 
        /error/database. If a user’s email address were invalid, you could redirect to /error/invalid-email, 
        and if everything was successful, you could redirect to /promo-email/thank-you. One of the advantages of 
        this method is that it’s very analytics friendly: the number of visits to your /promo-email/thank-you page 
        should roughly correlate to the number of people signing up for your promotional email. It is also very 
        straightforward to implement. It has some downsides, however. It does mean you have to allocate URLs
        to every possibility, which means pages to design, write copy for, and maintain. Another disadvantage is 
        that the user experience can be suboptimal: users like to be thanked, but then they have to navigate back to 
        where they were or where they want to go next. This is the approach we’ll be using for now: we’ll switch to 
        using “flash messages” (not to be confused with Adobe Flash) in Chapter 9.
    b.  Redirect to the original location with a flash message
        For small forms that are scattered throughout your site (like an email sign-up, for example), the best user 
        experience is not to interrupt the user’s navigation flow. That is, provide a way to submit an email address 
        without leaving the page. One way to do this, of course, is AJAX, but if you don’t want to use AJAX (or you 
        want your fallback mechanism to provide a good user experience), you can redirect back to the page the user 
        was originally on. The easiest way to do this is to use a hidden field in the form that’s populated with the 
        current URL. Since you want there to be some feedback that the user’s submission was received, you can use 
        flash messages.
    c.  Redirect to a new location with a flash message
        Large forms generally have their own page, and it doesn’t make sense to stay on that page once you’ve 
        submitted the form. In this situation, you have to make an intelligent guess about where the user might want 
        to go next and redirect accordingly. For example, if you’re building an admin interface, and you have a form 
        to create a new vacation package, you might reasonably expect your user to want to go to the admin page that 
        lists all vacation packages after submitting the form. However, you should still employ a flash message to 
        give the user feedback about the result of the submission.
    
    If you are using AJAX, I recommend a dedicated URL. It’s tempting to start AJAX handlers with a prefix 
    (for example, /ajax/enter), but I discourage this approach: it’s attaching implementation details to a URL. 
    Also, as we’ll see shortly, your AJAX handler should handle regular browser submissions as a failsafe.
